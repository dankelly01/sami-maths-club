name: Build and Deploy Production
on:
  push:
    branches:
      - cc/ci-tests
jobs:
  build_dist:
    name: Build Production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn install
      - name: Build
        run: npm run app:build
        # Store various folders as artifacts for use by other jobs
      - name: Store Web Artifact
        uses: actions/upload-artifact@v2
        with:
          name: maths-club-app-base
          path: |
            maths-club-app/dist
            maths-club-app/*.*
      - name: Store Android Artifact
        uses: actions/upload-artifact@v2
        with:
          name: maths-club-app-android
          path: |
            maths-club-app/android
      - name: Store IOS Artifact
        uses: actions/upload-artifact@v2
        with:
          name: maths-club-app-ios
          path: |
            maths-club-app/ios
  deploy_web:
    needs: [build_dist]
    name: Deploy to Firebase Production
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: maths-club-app-base
      - name: Deploy to Firebase
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting:staging
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
  build_deploy_android:
    needs: [build_dist]
    name: Deploy to Play Store Alpha Track
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Download Base Artifact
        uses: actions/download-artifact@v2
        with:
          name: maths-club-app-base
      - name: Download Android Artifact
        uses: actions/download-artifact@v2
        with:
          name: maths-club-app-android
          path: android
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          # use data stored in secretes to populate google-services.json
      - name: Write Google Services Json
        run: echo $GOOGLE_SERVICES_JSON > android/app/google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{secrets.GOOGLE_SERVICES_JSON}}
      - name: Generate Android Build
        # create release app bundle (aab) and app assemble (apk)
        run: chmod +x ./gradlew && ./gradlew clean :app:bundleRelease :app:assembleRelease
      - name: Sign Android Bundle
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: android/app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY_BASE64 }}
          alias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
      - name: Upload to Google play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: io.c2dev.samimathsclub
          releaseFile: ${{ env.SIGNED_RELEASE_FILE}}
          track: beta
          #whatsNewDirectory: /distribution/whatsnew
  build_deploy_ios:
    needs: [build_dist]
    name: Deploy to IOS Testflight
    runs-on: macOS-latest
    steps:
      - name: Download Base Artifact
        uses: actions/download-artifact@v2
        with:
          name: maths-club-app-base
      - name: Download IOS Artifact
        uses: actions/download-artifact@v2
        with:
          name: maths-club-app-ios
          path: ios
      - name: debug
        run: |
          ls && ls /Users/runner/work/sami-maths-club/sami-maths-club/
      - name: Setup environment
        run: |
          cd ios/App
          echo $MOBILEPROVISION_BASE64 | base64 --decode > ios-build.mobileprovision
        env:
          MOBILEPROVISION_BASE64: ${{secrets.IOS_PROVISION_BASE64}}
      - name: Install fastlane
        run: |
          cd ios/App
          sudo gem install fastlane -NV
      - name: Run fastlane
        run: |
          cd ios/App && sudo chmod -R 774 ./*
          fastlane ios ci_beta --verbose
        env:
          # created when first initialising match certs
          MATCH_PASSWORD: ${{secrets.FASTFILE_MATCH_PASSWORD}}
          # apple account pw, used to generate/refresh/verify certs
          # should match app manager username (as specified in fastfile), not main account holder
          FASTLANE_PASSWORD: ${{secrets.IOS_DEVACCOUNT_PW}}
          # basic auth creds: "git_username:git_personal_access_token_for_match_repo"
          FASTLANE_MATCH_GITHUB_AUTH: ${{secrets.FASTLANE_MATCH_GITHUB_AUTH}}
          # Generated from appleid.apple.com/account/manage (login to avoid 2fa)
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD}}
